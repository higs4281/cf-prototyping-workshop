- name: demo/
  slug: demo
  definition: |
    A simple page used to display each topdoc pattern of the component.
    This view is useful for browser testing your component styles in isolation
    because it does not contain any external styles or scripts that could affect
    the testing of the component.
- name: docs/
  slug: docs
  definition: |
    A style guide page documenting the rendered pattern, notes, example markup, and
    compiled CSS for each topdoc pattern of the component.
- name: src/
  slug: src
  definition: |
    The working folder containing component source files.
- name: .bowerrc
  slug: bowerrc
  definition: |
    Defines where Bower dependencies are initially installed.
    Note that `bower install` should not be run, use the `grunt vendor` task instead
    which uses the `bower-install` task to clean and move dependencies into `src/vendor/`.
- name: .gitignore
  slug: gitignore
  definition: |
    What Git uses to determine which files and directories to ignore,
    before you make a commit.
- name: CONTRIBUTING.md
  slug: contributingmd
  definition: |
    Information related to contributing to the software.
- name: COPYING.txt
  slug: copyingtxt
  definition: |
    The full software license.
- name: Gruntfile.js
  slug: gruntfilejs
  definition: |
    Used to configure or define tasks and load [Grunt](http://gruntjs.com/) plugins
    that are used to compile and build the component files.
- name: README.md
  slug: readmemd
  definition: |
    Contains helpful information relevant to the project.
    This is often the first place to look when getting acquainted with a new repository.
- name: TERMS.md
  slug: termsmd
  definition: |
    Outlines the terms of use of the software.
- name: bower.json
  slug: bowerjson
  definition: |
    Used to record any front end packages that are necessary to build your
    component or project.
    Running `grunt vendor` in the same folder as the `bower.json` file will install
    the correct version of each dependency listed therein by way of the `bower-install`
    task.
  body: |
    Most of the properties within `bower.json` are self explanatory.
    If you would like more information about them please review the
    [Defining a package section](http://bower.io/#defining-a-package) of
    [bower.io](http://bower.io/).

    [`exportsOverride` is described](#exportsoverride) in the `bower-install`
    section.
  terms:
  - name: exportsOverride
    slug: exportsoverride
    definition: |
      Allows you to categorize assets from a `bower.json` dependency.
      This categorization is used by the `bower-install` task to route asset categories
      to folder paths of your choosing.
    body: |
      Here is an example of how you could categorize all of the font files in the
      Font Awesome package as fonts.
      The `bower-install` task will use this information to put Font Awesomes fonts
      into a separate folder instead of placing them within `src/vendor/font-awesome`.

      A more detailed explanation can be found on the
      [Advanced usage](https://github.com/yatskevich/grunt-bower-task#advanced-usage)
      section of the [grunt-bower-task GitHub site](https://github.com/yatskevich/grunt-bower-task).
- name: package.json
  slug: packagejson
  definition: |
    Holds various metadata relevant to the component including which
    [npm](https://www.npmjs.org/) dependencies are required in order to compile and
    build it. Dependencies will mostly be [Grunt](http://gruntjs.com/) tasks.
    Running `npm install` in the same folder as the `package.json` file will install
    the correct version of each dependency listed therein.
